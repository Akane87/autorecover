// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: recover_service.proto
#ifndef GRPC_recover_5fservice_2eproto__INCLUDED
#define GRPC_recover_5fservice_2eproto__INCLUDED

#include "recover_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace recoverer {

class recover_service final {
 public:
  static constexpr char const* service_full_name() {
    return "recoverer.recover_service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status TellVersion(::grpc::ClientContext* context, const ::recoverer::Version& request, ::recoverer::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>> AsyncTellVersion(::grpc::ClientContext* context, const ::recoverer::Version& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>>(AsyncTellVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>> PrepareAsyncTellVersion(::grpc::ClientContext* context, const ::recoverer::Version& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>>(PrepareAsyncTellVersionRaw(context, request, cq));
    }
    virtual ::grpc::Status Chunk2Send(::grpc::ClientContext* context, const ::recoverer::Image& request, ::recoverer::ChunkList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::ChunkList>> AsyncChunk2Send(::grpc::ClientContext* context, const ::recoverer::Image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::ChunkList>>(AsyncChunk2SendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::ChunkList>> PrepareAsyncChunk2Send(::grpc::ClientContext* context, const ::recoverer::Image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::ChunkList>>(PrepareAsyncChunk2SendRaw(context, request, cq));
    }
    virtual ::grpc::Status SendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk& request, ::recoverer::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>> AsyncSendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>>(AsyncSendChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>> PrepareAsyncSendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>>(PrepareAsyncSendChunkRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void TellVersion(::grpc::ClientContext* context, const ::recoverer::Version* request, ::recoverer::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TellVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TellVersion(::grpc::ClientContext* context, const ::recoverer::Version* request, ::recoverer::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TellVersion(::grpc::ClientContext* context, const ::recoverer::Version* request, ::recoverer::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TellVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TellVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Chunk2Send(::grpc::ClientContext* context, const ::recoverer::Image* request, ::recoverer::ChunkList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Chunk2Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::ChunkList* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Chunk2Send(::grpc::ClientContext* context, const ::recoverer::Image* request, ::recoverer::ChunkList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Chunk2Send(::grpc::ClientContext* context, const ::recoverer::Image* request, ::recoverer::ChunkList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Chunk2Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::ChunkList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Chunk2Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::ChunkList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk* request, ::recoverer::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendChunk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk* request, ::recoverer::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk* request, ::recoverer::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendChunk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendChunk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>* AsyncTellVersionRaw(::grpc::ClientContext* context, const ::recoverer::Version& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>* PrepareAsyncTellVersionRaw(::grpc::ClientContext* context, const ::recoverer::Version& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::ChunkList>* AsyncChunk2SendRaw(::grpc::ClientContext* context, const ::recoverer::Image& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::ChunkList>* PrepareAsyncChunk2SendRaw(::grpc::ClientContext* context, const ::recoverer::Image& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>* AsyncSendChunkRaw(::grpc::ClientContext* context, const ::recoverer::Chunk& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::recoverer::Reply>* PrepareAsyncSendChunkRaw(::grpc::ClientContext* context, const ::recoverer::Chunk& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status TellVersion(::grpc::ClientContext* context, const ::recoverer::Version& request, ::recoverer::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>> AsyncTellVersion(::grpc::ClientContext* context, const ::recoverer::Version& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>>(AsyncTellVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>> PrepareAsyncTellVersion(::grpc::ClientContext* context, const ::recoverer::Version& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>>(PrepareAsyncTellVersionRaw(context, request, cq));
    }
    ::grpc::Status Chunk2Send(::grpc::ClientContext* context, const ::recoverer::Image& request, ::recoverer::ChunkList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::ChunkList>> AsyncChunk2Send(::grpc::ClientContext* context, const ::recoverer::Image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::ChunkList>>(AsyncChunk2SendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::ChunkList>> PrepareAsyncChunk2Send(::grpc::ClientContext* context, const ::recoverer::Image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::ChunkList>>(PrepareAsyncChunk2SendRaw(context, request, cq));
    }
    ::grpc::Status SendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk& request, ::recoverer::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>> AsyncSendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>>(AsyncSendChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>> PrepareAsyncSendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>>(PrepareAsyncSendChunkRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void TellVersion(::grpc::ClientContext* context, const ::recoverer::Version* request, ::recoverer::Reply* response, std::function<void(::grpc::Status)>) override;
      void TellVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TellVersion(::grpc::ClientContext* context, const ::recoverer::Version* request, ::recoverer::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TellVersion(::grpc::ClientContext* context, const ::recoverer::Version* request, ::recoverer::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TellVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TellVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Chunk2Send(::grpc::ClientContext* context, const ::recoverer::Image* request, ::recoverer::ChunkList* response, std::function<void(::grpc::Status)>) override;
      void Chunk2Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::ChunkList* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Chunk2Send(::grpc::ClientContext* context, const ::recoverer::Image* request, ::recoverer::ChunkList* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Chunk2Send(::grpc::ClientContext* context, const ::recoverer::Image* request, ::recoverer::ChunkList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Chunk2Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::ChunkList* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Chunk2Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::ChunkList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk* request, ::recoverer::Reply* response, std::function<void(::grpc::Status)>) override;
      void SendChunk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk* request, ::recoverer::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendChunk(::grpc::ClientContext* context, const ::recoverer::Chunk* request, ::recoverer::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendChunk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendChunk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::recoverer::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>* AsyncTellVersionRaw(::grpc::ClientContext* context, const ::recoverer::Version& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>* PrepareAsyncTellVersionRaw(::grpc::ClientContext* context, const ::recoverer::Version& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::recoverer::ChunkList>* AsyncChunk2SendRaw(::grpc::ClientContext* context, const ::recoverer::Image& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::recoverer::ChunkList>* PrepareAsyncChunk2SendRaw(::grpc::ClientContext* context, const ::recoverer::Image& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>* AsyncSendChunkRaw(::grpc::ClientContext* context, const ::recoverer::Chunk& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::recoverer::Reply>* PrepareAsyncSendChunkRaw(::grpc::ClientContext* context, const ::recoverer::Chunk& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TellVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_Chunk2Send_;
    const ::grpc::internal::RpcMethod rpcmethod_SendChunk_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status TellVersion(::grpc::ServerContext* context, const ::recoverer::Version* request, ::recoverer::Reply* response);
    virtual ::grpc::Status Chunk2Send(::grpc::ServerContext* context, const ::recoverer::Image* request, ::recoverer::ChunkList* response);
    virtual ::grpc::Status SendChunk(::grpc::ServerContext* context, const ::recoverer::Chunk* request, ::recoverer::Reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_TellVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TellVersion() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TellVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TellVersion(::grpc::ServerContext* /*context*/, const ::recoverer::Version* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTellVersion(::grpc::ServerContext* context, ::recoverer::Version* request, ::grpc::ServerAsyncResponseWriter< ::recoverer::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Chunk2Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Chunk2Send() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Chunk2Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chunk2Send(::grpc::ServerContext* /*context*/, const ::recoverer::Image* /*request*/, ::recoverer::ChunkList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChunk2Send(::grpc::ServerContext* context, ::recoverer::Image* request, ::grpc::ServerAsyncResponseWriter< ::recoverer::ChunkList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendChunk() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChunk(::grpc::ServerContext* /*context*/, const ::recoverer::Chunk* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendChunk(::grpc::ServerContext* context, ::recoverer::Chunk* request, ::grpc::ServerAsyncResponseWriter< ::recoverer::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TellVersion<WithAsyncMethod_Chunk2Send<WithAsyncMethod_SendChunk<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TellVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TellVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::recoverer::Version, ::recoverer::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::recoverer::Version* request, ::recoverer::Reply* response) { return this->TellVersion(context, request, response); }));}
    void SetMessageAllocatorFor_TellVersion(
        ::grpc::experimental::MessageAllocator< ::recoverer::Version, ::recoverer::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::recoverer::Version, ::recoverer::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TellVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TellVersion(::grpc::ServerContext* /*context*/, const ::recoverer::Version* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TellVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::recoverer::Version* /*request*/, ::recoverer::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TellVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::recoverer::Version* /*request*/, ::recoverer::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Chunk2Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Chunk2Send() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::recoverer::Image, ::recoverer::ChunkList>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::recoverer::Image* request, ::recoverer::ChunkList* response) { return this->Chunk2Send(context, request, response); }));}
    void SetMessageAllocatorFor_Chunk2Send(
        ::grpc::experimental::MessageAllocator< ::recoverer::Image, ::recoverer::ChunkList>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::recoverer::Image, ::recoverer::ChunkList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Chunk2Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chunk2Send(::grpc::ServerContext* /*context*/, const ::recoverer::Image* /*request*/, ::recoverer::ChunkList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Chunk2Send(
      ::grpc::CallbackServerContext* /*context*/, const ::recoverer::Image* /*request*/, ::recoverer::ChunkList* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Chunk2Send(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::recoverer::Image* /*request*/, ::recoverer::ChunkList* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendChunk() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::recoverer::Chunk, ::recoverer::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::recoverer::Chunk* request, ::recoverer::Reply* response) { return this->SendChunk(context, request, response); }));}
    void SetMessageAllocatorFor_SendChunk(
        ::grpc::experimental::MessageAllocator< ::recoverer::Chunk, ::recoverer::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::recoverer::Chunk, ::recoverer::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChunk(::grpc::ServerContext* /*context*/, const ::recoverer::Chunk* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::recoverer::Chunk* /*request*/, ::recoverer::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendChunk(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::recoverer::Chunk* /*request*/, ::recoverer::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_TellVersion<ExperimentalWithCallbackMethod_Chunk2Send<ExperimentalWithCallbackMethod_SendChunk<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_TellVersion<ExperimentalWithCallbackMethod_Chunk2Send<ExperimentalWithCallbackMethod_SendChunk<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TellVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TellVersion() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TellVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TellVersion(::grpc::ServerContext* /*context*/, const ::recoverer::Version* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Chunk2Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Chunk2Send() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Chunk2Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chunk2Send(::grpc::ServerContext* /*context*/, const ::recoverer::Image* /*request*/, ::recoverer::ChunkList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendChunk() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChunk(::grpc::ServerContext* /*context*/, const ::recoverer::Chunk* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TellVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TellVersion() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TellVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TellVersion(::grpc::ServerContext* /*context*/, const ::recoverer::Version* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTellVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Chunk2Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Chunk2Send() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Chunk2Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chunk2Send(::grpc::ServerContext* /*context*/, const ::recoverer::Image* /*request*/, ::recoverer::ChunkList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChunk2Send(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendChunk() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChunk(::grpc::ServerContext* /*context*/, const ::recoverer::Chunk* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TellVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TellVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TellVersion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TellVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TellVersion(::grpc::ServerContext* /*context*/, const ::recoverer::Version* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TellVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TellVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Chunk2Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Chunk2Send() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Chunk2Send(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Chunk2Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chunk2Send(::grpc::ServerContext* /*context*/, const ::recoverer::Image* /*request*/, ::recoverer::ChunkList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Chunk2Send(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Chunk2Send(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendChunk() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendChunk(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChunk(::grpc::ServerContext* /*context*/, const ::recoverer::Chunk* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendChunk(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TellVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TellVersion() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::recoverer::Version, ::recoverer::Reply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::recoverer::Version, ::recoverer::Reply>* streamer) {
                       return this->StreamedTellVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TellVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TellVersion(::grpc::ServerContext* /*context*/, const ::recoverer::Version* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTellVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::recoverer::Version,::recoverer::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Chunk2Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Chunk2Send() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::recoverer::Image, ::recoverer::ChunkList>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::recoverer::Image, ::recoverer::ChunkList>* streamer) {
                       return this->StreamedChunk2Send(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Chunk2Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Chunk2Send(::grpc::ServerContext* /*context*/, const ::recoverer::Image* /*request*/, ::recoverer::ChunkList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChunk2Send(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::recoverer::Image,::recoverer::ChunkList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendChunk() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::recoverer::Chunk, ::recoverer::Reply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::recoverer::Chunk, ::recoverer::Reply>* streamer) {
                       return this->StreamedSendChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendChunk(::grpc::ServerContext* /*context*/, const ::recoverer::Chunk* /*request*/, ::recoverer::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::recoverer::Chunk,::recoverer::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TellVersion<WithStreamedUnaryMethod_Chunk2Send<WithStreamedUnaryMethod_SendChunk<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_TellVersion<WithStreamedUnaryMethod_Chunk2Send<WithStreamedUnaryMethod_SendChunk<Service > > > StreamedService;
};

}  // namespace recoverer


#endif  // GRPC_recover_5fservice_2eproto__INCLUDED
