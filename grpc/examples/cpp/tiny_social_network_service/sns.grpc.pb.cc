// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sns.proto

#include "sns.pb.h"
#include "sns.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tinysns {

static const char* SNSService_method_names[] = {
  "/tinysns.SNSService/Login",
  "/tinysns.SNSService/Route",
  "/tinysns.SNSService/List",
  "/tinysns.SNSService/Follow",
  "/tinysns.SNSService/UnFollow",
  "/tinysns.SNSService/newServer",
  "/tinysns.SNSService/slavePing",
  "/tinysns.SNSService/updateServer",
  "/tinysns.SNSService/Timeline",
};

std::unique_ptr< SNSService::Stub> SNSService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSService::Stub> stub(new SNSService::Stub(channel));
  return stub;
}

SNSService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Login_(SNSService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Route_(SNSService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(SNSService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Follow_(SNSService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnFollow_(SNSService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_newServer_(SNSService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_slavePing_(SNSService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateServer_(SNSService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Timeline_(SNSService_method_names[8], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status SNSService::Stub::Login(::grpc::ClientContext* context, const ::tinysns::Request& request, ::tinysns::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void SNSService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void SNSService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::tinysns::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::tinysns::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status SNSService::Stub::Route(::grpc::ClientContext* context, const ::tinysns::Request& request, ::tinysns::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Route_, context, request, response);
}

void SNSService::Stub::experimental_async::Route(::grpc::ClientContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Route_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::Route(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Route_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::Route(::grpc::ClientContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Route_, context, request, response, reactor);
}

void SNSService::Stub::experimental_async::Route(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Route_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::AsyncRouteRaw(::grpc::ClientContext* context, const ::tinysns::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_Route_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::PrepareAsyncRouteRaw(::grpc::ClientContext* context, const ::tinysns::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_Route_, context, request, false);
}

::grpc::Status SNSService::Stub::List(::grpc::ClientContext* context, const ::tinysns::Request& request, ::tinysns::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void SNSService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::tinysns::Request* request, ::tinysns::ListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::ListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::tinysns::Request* request, ::tinysns::ListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void SNSService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::ListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ListReply>* SNSService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::tinysns::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ListReply>* SNSService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::tinysns::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status SNSService::Stub::Follow(::grpc::ClientContext* context, const ::tinysns::Request& request, ::tinysns::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Follow_, context, request, response);
}

void SNSService::Stub::experimental_async::Follow(::grpc::ClientContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::Follow(::grpc::ClientContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, reactor);
}

void SNSService::Stub::experimental_async::Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::tinysns::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::tinysns::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, false);
}

::grpc::Status SNSService::Stub::UnFollow(::grpc::ClientContext* context, const ::tinysns::Request& request, ::tinysns::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnFollow_, context, request, response);
}

void SNSService::Stub::experimental_async::UnFollow(::grpc::ClientContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnFollow_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::UnFollow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnFollow_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::UnFollow(::grpc::ClientContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnFollow_, context, request, response, reactor);
}

void SNSService::Stub::experimental_async::UnFollow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnFollow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::AsyncUnFollowRaw(::grpc::ClientContext* context, const ::tinysns::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_UnFollow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::PrepareAsyncUnFollowRaw(::grpc::ClientContext* context, const ::tinysns::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_UnFollow_, context, request, false);
}

::grpc::Status SNSService::Stub::newServer(::grpc::ClientContext* context, const ::tinysns::ServerRequest& request, ::tinysns::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_newServer_, context, request, response);
}

void SNSService::Stub::experimental_async::newServer(::grpc::ClientContext* context, const ::tinysns::ServerRequest* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_newServer_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::newServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_newServer_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::newServer(::grpc::ClientContext* context, const ::tinysns::ServerRequest* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_newServer_, context, request, response, reactor);
}

void SNSService::Stub::experimental_async::newServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_newServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::AsyncnewServerRaw(::grpc::ClientContext* context, const ::tinysns::ServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_newServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::PrepareAsyncnewServerRaw(::grpc::ClientContext* context, const ::tinysns::ServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_newServer_, context, request, false);
}

::grpc::Status SNSService::Stub::slavePing(::grpc::ClientContext* context, const ::tinysns::ServerRequest& request, ::tinysns::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_slavePing_, context, request, response);
}

void SNSService::Stub::experimental_async::slavePing(::grpc::ClientContext* context, const ::tinysns::ServerRequest* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_slavePing_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::slavePing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_slavePing_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::slavePing(::grpc::ClientContext* context, const ::tinysns::ServerRequest* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_slavePing_, context, request, response, reactor);
}

void SNSService::Stub::experimental_async::slavePing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_slavePing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::AsyncslavePingRaw(::grpc::ClientContext* context, const ::tinysns::ServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_slavePing_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::PrepareAsyncslavePingRaw(::grpc::ClientContext* context, const ::tinysns::ServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_slavePing_, context, request, false);
}

::grpc::Status SNSService::Stub::updateServer(::grpc::ClientContext* context, const ::tinysns::ServerConnection& request, ::tinysns::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_updateServer_, context, request, response);
}

void SNSService::Stub::experimental_async::updateServer(::grpc::ClientContext* context, const ::tinysns::ServerConnection* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_updateServer_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::updateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_updateServer_, context, request, response, std::move(f));
}

void SNSService::Stub::experimental_async::updateServer(::grpc::ClientContext* context, const ::tinysns::ServerConnection* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_updateServer_, context, request, response, reactor);
}

void SNSService::Stub::experimental_async::updateServer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysns::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_updateServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::AsyncupdateServerRaw(::grpc::ClientContext* context, const ::tinysns::ServerConnection& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_updateServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::Reply>* SNSService::Stub::PrepareAsyncupdateServerRaw(::grpc::ClientContext* context, const ::tinysns::ServerConnection& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tinysns::Reply>::Create(channel_.get(), cq, rpcmethod_updateServer_, context, request, false);
}

::grpc::ClientReaderWriter< ::tinysns::Posting, ::tinysns::Posting>* SNSService::Stub::TimelineRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::tinysns::Posting, ::tinysns::Posting>::Create(channel_.get(), rpcmethod_Timeline_, context);
}

void SNSService::Stub::experimental_async::Timeline(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::tinysns::Posting,::tinysns::Posting>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::tinysns::Posting,::tinysns::Posting>::Create(stub_->channel_.get(), stub_->rpcmethod_Timeline_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::tinysns::Posting, ::tinysns::Posting>* SNSService::Stub::AsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::tinysns::Posting, ::tinysns::Posting>::Create(channel_.get(), cq, rpcmethod_Timeline_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::tinysns::Posting, ::tinysns::Posting>* SNSService::Stub::PrepareAsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::tinysns::Posting, ::tinysns::Posting>::Create(channel_.get(), cq, rpcmethod_Timeline_, context, false, nullptr);
}

SNSService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::tinysns::Request, ::tinysns::Reply>(
          std::mem_fn(&SNSService::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::tinysns::Request, ::tinysns::Reply>(
          std::mem_fn(&SNSService::Service::Route), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::tinysns::Request, ::tinysns::ListReply>(
          std::mem_fn(&SNSService::Service::List), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::tinysns::Request, ::tinysns::Reply>(
          std::mem_fn(&SNSService::Service::Follow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::tinysns::Request, ::tinysns::Reply>(
          std::mem_fn(&SNSService::Service::UnFollow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::tinysns::ServerRequest, ::tinysns::Reply>(
          std::mem_fn(&SNSService::Service::newServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::tinysns::ServerRequest, ::tinysns::Reply>(
          std::mem_fn(&SNSService::Service::slavePing), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::tinysns::ServerConnection, ::tinysns::Reply>(
          std::mem_fn(&SNSService::Service::updateServer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[8],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SNSService::Service, ::tinysns::Posting, ::tinysns::Posting>(
          std::mem_fn(&SNSService::Service::Timeline), this)));
}

SNSService::Service::~Service() {
}

::grpc::Status SNSService::Service::Login(::grpc::ServerContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::Route(::grpc::ServerContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::List(::grpc::ServerContext* context, const ::tinysns::Request* request, ::tinysns::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::Follow(::grpc::ServerContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::UnFollow(::grpc::ServerContext* context, const ::tinysns::Request* request, ::tinysns::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::newServer(::grpc::ServerContext* context, const ::tinysns::ServerRequest* request, ::tinysns::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::slavePing(::grpc::ServerContext* context, const ::tinysns::ServerRequest* request, ::tinysns::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::updateServer(::grpc::ServerContext* context, const ::tinysns::ServerConnection* request, ::tinysns::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::Timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tinysns::Posting, ::tinysns::Posting>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tinysns

